name: 'terraform-apply'

on:
  workflow_dispatch:
    inputs:
      component:
        description: 'Component that needs to be provisioned'     
        required: true

permissions:
  contents: read

env:
  TERRAFORM_VERSION: 1.3.7

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.event.inputs.component }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Step to generate unique id for this run
    - id: UUIDGen
      run: |
        echo "uuid=$(uuidgen)" >> $GITHUB_OUTPUT

    # gcp authorization with workload identity federation
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: 'projects/797097160987/locations/global/workloadIdentityPools/github-id-pool/providers/github-provider'
        service_account: 'gh-service-account@agile-tangent-401105.iam.gserviceaccount.com'

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # - name: Create guid for workspace
    #   run: echo uuidgen >> $UUID

    # - name: guid versbosity 
    #   run: echo $UUID

    # create new workspace to create new state file
    - name: Setup Workspace
      run: terraform workspace new ${{ steps.UUIDGen.outputs.uuid}} 

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -out=tfplan
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
